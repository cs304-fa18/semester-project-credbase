#!/usr/bin/python2.7

"""
Flask application that manages CRED database
----------------------------------------------------------------
Khonzoda Umarova & Annabel Rothschild
CS 304 - Databases 
Final Project 
November, 2018
"""


from flask import (Flask, url_for, redirect, request, render_template, session, 
                   flash, jsonify)

from werkzeug import secure_filename
import os
import json
import mediaBias_intoNS
import dbi
import bcrypt
 

app = Flask(__name__)
app.secret_key = "a very secret phrase"
app.config['UPLOADS'] = 'uploads'

 
"""Home page"""
@app.route('/')
def home():
    return render_template("home_page.html", page_title="Welcome to CredBase!", login_session=session)

"""User information"""
@app.route('/user/<username>')
def user(username):
    if username == " ":
        return redirect( url_for('home') )
    try:
        # don't trust the URL; it's only there for decoration
        if 'username' in session:
            user = session['username']
            # user can access only their own account page
            if username != user:
                flash('You are not logged in as this account. Switch accounts to proceed')
                return redirect( url_for('home') )
            conn = dbi.connect('credbase')
            user_info = dbi.lookupUser(conn, user)
            sources = dbi.getWatchedNewsSources(conn, user)
            return render_template('user_page.html', page_title=user_info['name'], sources=sources, login_session=session)
        else:
            flash('You are not logged in. Please login or join')
            return redirect( url_for('home') )
    except Exception as err:
        flash('Error: '+str(err))
        return redirect( url_for('home') )
        

"""Returns information on a news source, given NSID (news source ID)"""    
@app.route('/source/<int:nsid>')
def newsSource(nsid):
    conn = dbi.connect('credbase')
    source = dbi.lookupNewsSource(conn, nsid)
        
    if source == None:
        flash("Sorry, no news source with this ID is in the database")
        return redirect( url_for('home') )
    else:
        if 'username' in session and dbi.checkInWatchlist(conn, nsid, session['username']) is not None:
            source['onWatchlist'] = True
        else:
            source['onWatchlist'] = False
        stories = dbi.getStoriesByNewsSource(conn, nsid)
        similar = dbi.getSimilar(conn, nsid)
        #handle error that sometimes occurs, with unicode (some titles and URLs have hex characters in them)
        try:
            for story in stories:
                story['url'] = unicode(story['url'], errors='ignore')
                story['title'] = unicode(story['url'], errors='ignore')
                story['originQuery'] = unicode(story['originQuery'], errors='ignore')
                story['resultDate'] = unicode(story['resultDate'], errors='ignore')
            return render_template('news_source_page.html', page_title=unicode(source['name'], errors='ignore'), newsSource=source, stories=stories, similar_sources=similar, login_session=session)
        #sometimes have errors turning into unicode if already converted
        except TypeError: 
            return render_template('news_source_page.html', page_title=source['name'], newsSource=source, stories=stories, similar_sources=similar, login_session=session)


##----------------# Route that handles json file uploads #---------------------#
'''Allows a logged-in user to upload a new JSON file of search results'''
@app.route('/upload/', methods=["GET", "POST"])
def file_upload():
    print session
    #check that user is logged in
    if 'username' not in session:
        flash("You must be logged in to use this feature")
        return render_template("home_page.html", page_title="Welcome to CRED base!", login_session=session)
    #if method is GET, just render the empty page
    if request.method == 'GET':
        return render_template('upload_json.html',src='',nm='', login_session=session)
    else:
        #catch any upload errors
        try:
            #check Cred PIN, which is stored encrypted in users table associated with credAdmin account
            pin = request.form['nm']
            conn = dbi.connect('credbase')
            result = dbi.checkUserPass(conn, 'credAdmin')
            hashed = result['hashedPWD']
            if bcrypt.hashpw(pin.encode('utf-8'),hashed.encode('utf-8')) != hashed:
                flash('PIN that you entered is incorrect')
                return render_template('upload_json.html',src='',nm='', login_session=session)
            
            #proceed with upload
            nm = session['username']
            query = request.form['query']
            date = request.form['date']
            #make uploader give a valid date and query for use in database
            if query == '' or date == '':
                if query == '':
                    flash('You must provide the query title')
                if date == '':
                    flash('You must provide a date in format month-day-year, ex: 01-01-2018')
                return render_template('upload_json.html',src='',nm='', login_session=session)
            f = request.files['file']
            #check to see if file is indeed a JSON file, just checks extension
            validJSON = False 
            if f.content_type == "application/json":
                validJSON = True
            else:
                flash("Upload Error: file must be of type JSON")
            if validJSON:
                filename = secure_filename('{}_{}.{}'.format(nm, query, "json"))
                pathname = os.path.join(app.config['UPLOADS'],filename)
                f.save(pathname)
                flash('Upload successful')
                dbi.addFile(conn, nm, filename, query, date)
                return render_template('upload_json.html',
                                       nm=filename, login_session=session)
            return render_template('upload_json.html',src='',nm='', login_session=session)
        except Exception as err:
            flash('Upload failed {why}'.format(why=err))
            return render_template('upload_json.html',src='',nm='', login_session=session)
            
            

##------------# Routes that handle different search results #-----------------##
'''Search for a news source by name'''
@app.route('/search/', methods=['GET', 'POST'])
def search():
    query = request.form.get("searchterm")
    option = request.form.get('search-option')
    
    if option == 'source':
        return redirect(url_for('searchNewsSources', search_term=query))
    elif option == 'article':
        return redirect(url_for('searchArticles', search_term=query))
    else:
        flash("Invalid url")
        #We need to create not found page or something...
        return redirect( url_for('home') )
    
        
@app.route('/search-sources/', defaults={'search_term':''})
@app.route('/search-sources/<search_term>')
def searchNewsSources(search_term):
    """This page displays search results when there are multiple results that
    satisfy the search query. If there is only one, it redirects to the page
    of this news source. If there are none, it flashes the message"""
    conn = dbi.connect('credbase')
    search_results = dbi.getSearchedNewsSources(conn, search_term)
    
    #list of source nsid's that the current user is watching
    if 'username' in session:
        watched_sources = dbi.getWatchedNewsSources(conn, session['username'])
        nsid_lst = [source['nsid'] for source in watched_sources]
    else:
        nsid_lst = []
    
    for entry in search_results:
        print entry['name']
        entry['name'] = unicode(entry['name'], errors='ignore')
        #sources that are on the watchlist are tagged
        if entry['nsid'] in nsid_lst:
            entry['onWatchlist'] = True
        else:
            entry['onWatchlist'] = None
        
    if len(search_results) == 1:
        return redirect(url_for('newsSource', nsid=search_results[0]['nsid']))
    elif len(search_results) == 0:
        flash('Sorry, no news source with such name was found')
    return render_template('searched_sources_page.html', page_title="Search results for: '" + search_term + "'", search_results=search_results, login_session=session)


@app.route('/search-articles/', defaults={'search_term':''})    
@app.route('/search-articles/<search_term>', methods=['GET', 'POST'])
def searchArticles(search_term):
    '''This page displays article titles whose title is like the query'''
    conn = dbi.connect('credbase') 
    print "search term: " + search_term
    articles = dbi.findArticlesByTopic(conn, search_term)
    try:
        for entry in articles:
            print entry
            entry['url'] = unicode(entry['url'], errors='ignore')
            entry['title'] = unicode(entry['title'], errors='ignore')
            entry['name'] = unicode(entry['name'], errors='ignore')
            print entry['name']
        return render_template('search_by_query.html', articles=articles, login_session=session)
    #don't know why error happens but it does and we handle it here
    except TypeError: 
        return render_template('search_by_query.html', articles=articles, login_session=session)
    
    
##-----------# Routes for updating & adding articles and sources #------------##    
'''Allows logged-in user to update articles (ie members of search results)'''    
@app.route('/update-article/<int:sid>', methods=['GET', 'POST'])
def updateArticle(sid):
    if 'username' not in session:
        flash("You must be logged in to use this feature")
        return render_template("home_page.html", page_title="Welcome to CRED base!", login_session=session)
    
    conn = dbi.connect('credbase') 
    if request.method == "GET":
        articleInfo = dbi.getArticleBySid(conn, sid)
        #handling case of hex characters in titles and URLs
        try:
            articleInfo['url'] = unicode(articleInfo['url'], errors='ignore')
            articleInfo['title'] = unicode(articleInfo['title'], errors='ignore')
            return render_template('update_article.html', articleInfo=articleInfo, login_session=session)
        #handle case where already converted
        except TypeError:
            return render_template('update_article.html', articleInfo=articleInfo, login_session=session)
    if request.method == "POST":
        #if user wants to delete the article 
        if 'submitDelete' in request.form:
            if 'delete' in request.form['submitDelete']: 
                print "going to delete"
                dbi.deleteSearchResult(conn, sid)
                flash("Article with SID: " + str(sid) + " was removed from the database")
                articleInfo = dbi.getArticleBySid(conn, sid)
                return render_template('update_article.html', articleInfo=[], login_session=session)
        #if user wants to update elements of the article's entry
        if 'submitUpdate' in request.form:
            if 'update' in request.form['submitUpdate']: 
                original = dbi.getArticleBySid(conn, sid)
                #check to see that original and current values don't match before updating
                if (original['url'] != request.form['url']) and (request.form['url'] != ""):
                    dbi.updateArticleURL(conn, request.form['url'], sid)
                if (original['resultDate'] != request.form['date']) and (request.form['date'] != ""):
                    print "updating result date: " + str(request.form['date'])
                    dbi.updateArticleResultDate(conn, request.form['date'], sid)
                if (original['originQuery'] != request.form['oq']) and (request.form['oq'] != ""):
                    dbi.updateArticleOriginQuery(conn, request.form['oq'], sid)
                if (original['title'] != request.form['title']) and (request.form['title'] != ""):
                     dbi.updateArticleTitle(conn, request.form['title'], sid)
                articleInfo = dbi.getArticleBySid(conn, sid)
                return render_template('update_article.html', articleInfo=articleInfo, login_session=session)
    articleInfo = dbi.getArticleBySid(conn, sid)
    flash("No changes made, please change appropriate values or delete item, as desired")
    return render_template('update_article.html', articleInfo=articleInfo, login_session=session)



'''Logged-in users can update a source, to fix inaccuracies.'''
@app.route('/update-source/<int:nsid>', methods=['GET', 'POST'])
def updateSource(nsid):
    if 'username' not in session:
        flash("You must be logged in to use this feature")
        return render_template("home_page.html", page_title="Welcome to CRED base!", login_session=session)

    conn = dbi.connect('credbase') 
    if request.method == "GET":
        sourceInfo = dbi.lookupNewsSource(conn, nsid)
        #handing hex characters
        try:
            sourceInfo['url'] = unicode(sourceInfo['url'], errors='ignore')
            sourceInfo['name'] = unicode(sourceInfo['name'], errors='ignore')
            return render_template('update_source.html', sourceInfo=sourceInfo, login_session=session)
        except TypeError:
            return render_template('update_source.html', sourceInfo=sourceInfo, login_session=session)
    if request.method == "POST":
        print "got inside post"
        #delete if user wants
        if len(request.form) != 0:
            if 'submitDelete' in request.form:
                if 'delete' in request.form['submitDelete']: 
                    print "going to delete"
                    dbi.deleteSource(conn, nsid)
                    flash("Source with NSID: " + str(nsid) + " was removed from the database")
                    sourceInfo = dbi.lookupNewsSource(conn, nsid)
                    return render_template('update_source.html', sourceInfo=[], login_session=session)
            #otherwise update as appropriate
            if 'submitUpdate' in request.form:
                if 'update' in request.form['submitUpdate']: 
                    original = dbi.lookupNewsSource(conn, nsid)
                    print original
                    if (original['name'] != request.form['name']) and (request.form['name'] != ""):
                         dbi.updateSourceName(conn, request.form['name'], nsid)
                    if (original['publisher'] != request.form['publisher']) and (request.form['publisher'] != ""):
                         dbi.updateSourcePublisher(conn, request.form['publisher'], nsid)
                    #special case where may not have a mediatype value picked
                    if 'mediatype' in request.form:
                        if (original['mediatype'] != request.form['mediatype']) and (request.form['mediatype'] != ""):
                             print original['mediatype']
                             print request.form['mediatype']
                             dbi.updateSourceMediatype(conn, request.form['mediatype'], nsid)
                    if (original['location'] != request.form['location']) and (request.form['location'] != ""):
                         dbi.updateSourceLocation(conn, request.form['location'], nsid)
                    if (original['editor'] != request.form['editor']) and (request.form['editor'] != ""):
                         dbi.updateSourceEditor(conn, request.form['editor'], nsid)
                    if (original['url'] != request.form['url']) and (request.form['url'] != ""):
                        dbi.updateSourceURL(conn, request.form['url'], nsid)
                    if (original['doe'] != request.form['doe']) and (request.form['doe'] != ""):
                         dbi.updateSourceDOE(conn, request.form['doe'], nsid)
                    sourceInfo = dbi.lookupNewsSource(conn, nsid)
                    return render_template('update_source.html', sourceInfo=sourceInfo, login_session=session)
        else:
            print "got into else"
            print dbi.lookupNewsSource(conn, nsid)
            sourceInfo = dbi.lookupNewsSource(conn, nsid)
            try:
                sourceInfo['url'] = unicode(sourceInfo['url'], errors='ignore')
                sourceInfo['name'] = unicode(sourceInfo['name'], errors='ignore')
                return render_template('update_source.html', sourceInfo=sourceInfo, login_session=session)
            except TypeError:
                return render_template('update_source.html', sourceInfo=sourceInfo, login_session=session)
    flash("No changes made, please change appropriate values or delete item, as desired")
    return render_template('update_source.html', sourceInfo=sourceInfo, login_session=session)
    
    
    
'''Logged-in users can add a new source.'''    
@app.route('/add-source/', methods=['GET', 'POST'])
def addSource():
    if 'username' not in session:
        flash("You must be logged in to use this feature")
        return render_template("home_page.html", page_title="Welcome to CRED base!", login_session=session)
    conn = dbi.connect('credbase') 
    if request.method == "GET":
        return render_template('add_source.html', login_session=session)
    else:
        if 'submitSourceAdd' in request.form:
            print request.form
            if 'add' in request.form['submitSourceAdd']:
                name = request.form.get('name')
                print name
                if name != "":
                    publisher = request.form.get('publisher')
                    mediatype = request.form.get('mediatype')
                    location = request.form.get('location')
                    editor = request.form.get('editor')
                    url = request.form.get('url')
                    doe = request.form.get('doe')
                    dbi.addNewsSource(conn, name, publisher, mediatype, location, editor, url, doe)
                    flash("New news source " + name + " was successfully added.")
                    return render_template('add_source.html',login_session=session)
                else:
                    flash("Your source must have a name")
                    return render_template('add_source.html',login_session=session)
                

##---------------------# Routes for watchlist management #--------------------##
@app.route('/watch/', methods = ['POST'])
def watchSource():
    if 'username' not in session:
        flash("You must be logged in to use this feature")
        return render_template("home_page.html", page_title="Welcome to CRED base!", login_session=session)
    
    username = session['username']
    nsid = request.form['nsid']
    conn = dbi.connect('credbase')
    if dbi.addToWatchlist(conn, nsid, username):
        return jsonify({'nsid':nsid})
    else:
        flash("You are already watching this source")
        # return redirect(request.referrer)
        return redirect( url_for('home'))
        
@app.route('/unwatch/', methods = ['POST'])
def unwatchSource():
    if 'username' not in session:
        flash("You must be logged in to use this feature")
        return render_template("home_page.html", page_title="Welcome to CRED base!", login_session=session)
    
    username = session['username']
    nsid = request.form['nsid']
    conn = dbi.connect('credbase')
    dbi.removeFromWatchlist(conn, nsid, username)
    return jsonify({'nsid':nsid})
    
                
##-------------------# Routes for session/login management #------------------##
@app.route('/login/', methods = ['POST'])
def login():
    try:
        username = request.form['username']
        passwd = request.form['password']
        conn = dbi.connect('credbase')
        result = dbi.checkUserPass(conn, username)
        
        if result is None:
            # Same response as wrong password, so no information about what went wrong
            flash('login incorrect. Try again or join')
            return redirect( url_for('home'))
            
        hashed = result['hashedPWD']
        name = result['name']
        # strings always come out of the database as unicode objects
        
        if bcrypt.hashpw(passwd.encode('utf-8'),hashed.encode('utf-8')) == hashed:
            flash('successfully logged in as '+username)
            session['username'] = username
            session['name'] = name
            return redirect( url_for('user', username=username) )
        else:
            flash('login incorrect. Try again or join')
            return redirect( url_for('home'))
    except Exception as err:
        flash('form submission error '+str(err))
        return redirect( url_for('home') )
        

@app.route('/logout/', methods = ['POST'])
def logout():
    try:
        if 'username' in session:
            session.pop('username')
            session.pop('name')
            flash('You are logged out')
            return redirect(url_for('home'))
        else:
            flash('you are not logged in. Please login or join')
            return redirect( url_for('home') )
    except Exception as err:
        flash('some kind of error '+str(err))
        return redirect( url_for('home') )


@app.route('/join/', methods = ['POST'])
def join():
    try:
        name = request.form['name']
        username = request.form['username']
        passwd1 = request.form['password1']
        passwd2 = request.form['password2']
        if not username.isalnum():
            flash('username should be alphanumeric')
            return redirect( url_for('home'))
        if passwd1 != passwd2:
            flash('passwords do not match')
            return redirect( url_for('home'))
        hashed = bcrypt.hashpw(passwd1.encode('utf-8'), bcrypt.gensalt())
        conn = dbi.connect('credbase')
        result = dbi.checkUserPass(conn, username)
        
        #NEED TO ADD THREAD SAFE MODIFICATIONS HERE
        if result is not None:
            #WE COULD USE AJAX HERE
            flash('That username is taken')
            return redirect(url_for('home'))
        else:
            #adds a new username into the system
            dbi.addUser(conn, name, username, hashed)
        
        session['username'] = username
        session['name'] = name
        return redirect( url_for('user', username=username) )
    except Exception as err:
        flash('form submission error '+str(err))
        return redirect( url_for('home') )
    
    


if __name__ == '__main__':
    app.debug = True
    app.run('0.0.0.0',8081)"""
Python script that connects to the database
--------------------------------------------------
Khonzoda Umarova & Annabel Rothschild
CS 304 - Databases 
Final Project 
Fall 2018
"""
import sys
import MySQLdb
import pandas as pd
import json
import os
#import dbconn2

#annabel testing:
import mediaBias_intoNS
from urlparse import urlparse
from pprint import pprint
import serverdate


def connect(db):
    """Establishes a connection with the
    given database"""
    # cnf = dbconn2.read_cnf()
    # cnf['db'] = db
    # conn = MySQLdb.connect(**cnf)
    #I NEED TO FIGURE OUT HOW TO DO **CNF THING
    conn = MySQLdb.connect(user='ubuntu', host='localhost',
                          passwd='',
                          db=db)
    conn.autocommit(True)
    return conn
 
 
def lookupNewsSource(conn, nsid):
    """Extracts a news source associated with the given ID. If no such
    news source exists, None is returned"""
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''select * from newsSource where nsid = %s''', [nsid])
    return curs.fetchone()
   
    
def getSimilar(conn, nsid):
    """Extracts news sources that are similar to one with the given nsid"""
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''(select similar.nsid2 as `similar_id`, newsSource.name
                    from similar, newsSource 
                    where similar.nsid1 = %s and newsSource.nsid=similar.nsid2)
                    union
                    (select similar.nsid1 as `similar_id`, newsSource.name
                    from similar, newsSource 
                    where nsid2 = %s and newsSource.nsid=similar.nsid1)''', 
                    [nsid, nsid])
    return curs.fetchall()
   
   
def getStoriesByNewsSource(conn, nsid):   
    """Extracts stories/search results that come from the given news source"""
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''select * from searchresults where nsid = %s''', [nsid])
    returnVal = curs.fetchall()
    return returnVal

def getNewsSourceByURL(conn, url):   
    """Extracts stories/search results that come from the given news source"""
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    urlLike = str("%" + url + "%")
    curs.execute('''select nsid from newsSource where url like %s''', [urlLike])
    return curs.fetchone()


def findArticlesByTopic(conn, title):   
    """Given a database connection, extracts stories/search results that come 
    from a news source with the provided title"""
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    titleLike = '%' + title + '%'
    print titleLike
    curs.execute('''select newsSource.nsid, newsSource.name, searchresults.sid, searchresults.url, searchresults.title, searchresults.resultDate, searchresults.originQuery from newsSource, searchresults where searchresults.title like %s and newsSource.nsid = searchresults.nsid''', [titleLike])
    #annabel clean this up later, debugging
    returnVal = curs.fetchall()
    print returnVal
    return returnVal
    
    
def getSearchedNewsSources(conn, searchTerm):
    """Given a database connection, searches the database for a news source 
    that matches the name provided"""
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    pattern = '%' + searchTerm + '%'
    curs.execute('''select * from newsSource where name like %s''', [pattern])
    return curs.fetchall()

def getArticleBySid(conn, sid):
    """Given a database connection, searches the database for article 
    with matching sid"""
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''select * from searchresults where sid = %s''', [sid])
    return curs.fetchone()


def deleteSearchResult(conn, sid):
    """Given a database connection, allows user to delete search result 
    from the database"""
    conn = connect("credbase")
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute ('''delete from searchresults where sid=%s''', [sid])
    

def deleteSource(conn, nsid):
    """Given a database connection, allows users to delete news source"""
    conn = connect("credbase")
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute ('''delete from newsSource where nsid=%s''', [nsid])
    

"""*********************************************************************
The following methods handle updating each component of the article or source
individually. This probably isn't the most efficient way to handle the 
situation, but I chose to do so for clarity and to be explicit. I will 
look into cleaning this up for the beta version. -- Annabel
************************************************************************"""
def updateArticleTitle(conn, title, sid):
    """Given a database connection, and a new article title, updates the
    corresponding information of the article with the provided sid"""
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    try:
        curs.execute('''update searchresults set title = %s where sid = %s''', [title, sid])
    except (MySQLdb.Error, MySQLdb.Warning) as error:
        print(error)
        
def updateArticleURL(conn, url, sid):
    """Given a database connection, and a new url, updates the
    corresponding information of the article with the provided sid"""
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    try:
        curs.execute('''update searchresults set url = %s where sid = %s''', [url, sid])
    except (MySQLdb.Error, MySQLdb.Warning) as error:
        print(error)
        
def updateArticleResultDate(conn, date, sid):
    """Given a database connection, and a new date, updates the
    corresponding information of the article with the provided sid"""
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    try:
        curs.execute('''update searchresults set resultDate = %s where sid = %s''', [date, sid])
    except (MySQLdb.Error, MySQLdb.Warning) as error:
        print(error)

def updateArticleOriginQuery(conn, oq, sid):
    """Given a database connection, and a origin query, updates the
    corresponding information of the article with the provided sid"""
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    try:
        curs.execute('''update searchresults set originQuery = %s where sid = %s''', [oq, sid])
    except (MySQLdb.Error, MySQLdb.Warning) as error:
        print(error)

def updateSourceName(conn, name, nsid):
    """Given a database connection, and a new source name, updates the
    corresponding information of the news source with the provided nsid"""
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    try:
        curs.execute('''update newsSource set name = %s where nsid = %s''', [name, nsid])
    except (MySQLdb.Error, MySQLdb.Warning) as error:
        print(error)
        
def updateSourcePublisher(conn, publisher, nsid):
    """Given a database connection, and a new publisher, updates the
    corresponding information of the news source with the provided nsid"""
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    try:
        curs.execute('''update newsSource set publisher = %s where nsid = %s''', [publisher, nsid])
    except (MySQLdb.Error, MySQLdb.Warning) as error:
        print(error)
        
def updateSourceMediatype(conn, mediatype, nsid):
    """Given a database connection, and a new media type, updates the
    corresponding information of the news source with the provided nsid"""
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    try:
        curs.execute('''update newsSource set mediatype = %s where nsid = %s''', [mediatype, nsid])
    except (MySQLdb.Error, MySQLdb.Warning) as error:
        print(error)
        
def updateSourceLocation(conn, location, nsid):
    """Given a database connection, and a new location, updates the
    corresponding information of the news source with the provided nsid"""
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    try:
        curs.execute('''update newsSource set location = %s where nsid = %s''', [location, nsid])
    except (MySQLdb.Error, MySQLdb.Warning) as error:
        print(error)
 
def updateSourceEditor(conn, editor, nsid):
    """Given a database connection, and a new editor, updates the
    corresponding information of the news source with the provided nsid"""
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    try:
        curs.execute('''update newsSource set editor = %s where nsid = %s''', [editor, nsid])
    except (MySQLdb.Error, MySQLdb.Warning) as error:
        print(error)     
        
def updateSourceURL(conn, url, nsid):
    """Given a database connection, and a new url, updates the
    corresponding information of the news source with the provided nsid"""
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    try:
        curs.execute('''update newsSource set url = %s where nsid = %s''', [url, nsid])
    except (MySQLdb.Error, MySQLdb.Warning) as error:
        print(error)     
        

def updateSourceDOE(conn, doe, nsid):
    """Given a database connection, and a new date of establishment, updates the
    corresponding information of the news source with the provided nsid"""
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    try:
        curs.execute('''update newsSource set doe = %s where nsid = %s''', [doe, nsid])
    except (MySQLdb.Error, MySQLdb.Warning) as error:
        print(error)     

def lookupUser(conn, uid):
    """Extracts the user associated with the given ID and information about them,
    including passoword hash??"""
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''select * from user where username = %s''', [uid])
    return curs.fetchone()
    
    
def getWatchedNewsSources(conn, uid): 
    """Given database connection and the username returns all sources that are 
    on the user's watchlist"""
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''select newsSource.name, watching.nsid, watching.addDate 
                    from watching, newsSource 
                    where username = %s and 
                    watching.nsid = newsSource.nsid''', [uid])
    return curs.fetchall()


def checkUserPass(conn, username):
    """Given username returns a corresponding hashed value of the password"""
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''select hashedPWD, name from user where username = %s''',
                     [username])
    return curs.fetchone()
    
def addUser(conn, name, username, hashed):
    """Given database connection username and the hashed value of the password, 
    inserts a new user into the database"""
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''lock tables user write''')
    curs.execute('''select hashedPWD, name from user where username = %s''',
                     [username])
    if curs.fetchone() is not None:
        curs.execute('''unlock tables''')
        return False
    if curs.fetchone() == None:
        curs.execute('''insert into user(name,username,access,hashedPWD) values(%s,%s,'regular',%s)''',
                     [name, username, hashed])
    curs.execute('''unlock tables''')
    return True


def addStory(conn, query, date, url, title, nsid):
    """Given a database connection and infromation about SERP article inserts 
    it into the database"""
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''insert into searchresults(title,originQuery,resultDate,url,nsid) values(%s,%s,%s,%s,%s)''',
                     [title, query, date, url, nsid])


def addNewsSource(conn, name, publisher, mediatype, location, editor, url, doe):
    """Takes database connection along with other information about the news source
    and inserts it into the database"""
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''insert into newsSource(nsid,name,publisher,mediatype,location,editor,url,doe) values(%s,%s,%s,%s,%s,%s,%s,%s)''',
                     [None, name, publisher, mediatype, location, editor, url, doe])
    

def addMBF(conn, tupList):
    """Helper function that takes a list of tuples that correspond to sources from
    media bias fact-check list and inserts them into the database"""
    for entry in tupList:
        curs = conn.cursor(MySQLdb.cursors.DictCursor)
        curs.execute('''insert into newsSource(nsid,name,publisher,mediatype,location,editor,url,doe) values (%s,%s,%s,%s,%s,%s,%s,%s)''',
                     [entry[0],entry[1],entry[2],entry[3],entry[4],entry[5],entry[6],entry[7]])


def checkInWatchlist(conn, nsid, username):
    '''Given a database connection, checks whether the news source with the 
    given nsid is in the watchlist of user with provided username'''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''select * from watching where nsid=%s and username=%s''', [nsid, username])
    return curs.fetchone()


def addToWatchlist(conn, nsid, username):
    '''Given a database connection, adds the news source with the given nsid
    into the watchlist of the user with this username'''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''lock tables watching write''')
    # curs.execute('''select * from watching where nsid=%s and username=%s''', [nsid, username])
    if checkInWatchlist(conn, nsid, username) is not None:
        curs.execute('''unlock tables''')
        return False
    curs.execute('''insert into watching(nsid, username, addDate) values (%s,%s,%s)''', [nsid, username, serverdate.today()])
    curs.execute('''unlock tables''')
    return True
    
    
def removeFromWatchlist(conn, nsid, username):
    '''Given a database connection, removes a news source with the given nsid 
    form the watchlist of the user with provided username'''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''delete from watching where nsid=%s and username=%s''', [nsid, username])
    
    

def addFile(conn, nm, filename, query, date):
    """Lets user upload a new JSON file to the database"""
    #save file in json table for reference
    with open("uploads/"+filename) as data_file:
	    data = json.load(data_file)
	#using pandas isn't necessary here, but was helpful for visual aspects
	#the below dataframe operations are messy, could be clarified
    df0 = pd.DataFrame(data["page_0"])
    df1 = pd.DataFrame(data["page_1"])
    df2 = pd.DataFrame(data["page_2"])
    df3 = pd.DataFrame(data["page_3"])
    df4 = pd.DataFrame(data["page_4"])
    
    df = pd.concat([df0, df1, df2, df3, df4], ignore_index=True)


    conn = connect('credbase')
    for row, column in df.iterrows():
        #encode -- handles hex characters
        title = df.iloc[row][0].encode('utf-8')
        url = df.iloc[row][1].encode('utf-8')
        #begin matching process to potential news source
        potentialNSID = getNewsSourceByURL(conn, urlparse(url).netloc)
        if potentialNSID == None:
            nsid = None
        else:
            nsid = str(potentialNSID['nsid']).encode('utf-8')
        # in future want to add new news source to newsSource
        #Annabel: I should build this for beta version
        addStory(conn, query, date, url, title, nsid)

    
    
    
if __name__ == '__main__':
    conn = connect('credbase')
    returnVal = getStoriesByNewsSource(conn, 91)
    print returnVal
    #print mediaBias_intoNS.getTups()[0]
    #addMBF(conn, mediaBias_intoNS.getTups())
    # addFile(conn, 123, "Trump wall.json", "Trump wall", "2018-01-01")
    #result = getWatchedNewsSources(conn, "123")
    #print(len(result))
    #THESE ARE ALREADY ADDED
    # addFile(conn, kumarova, "Men women pay gap.json", "Men women pay gap", "2018-06-22")
    # addFile(conn, kumarova, "female Phd.json", "female Phd", "2018-08-19")
    # addFile(conn, kumarova, "Global warming real.json", "Global warming real", "2018-10-07")
    # addFile(conn, kumarova, "Big data.json", "What is daca", "2018-10-07")
    
#!/usr/bin/python2.7

# Script to show the time on the server

# Written by Scott D. Anderson
# scott.anderson@acm.org
# November 2010

import sys

from datetime import datetime

def today():
    """Returns a string for the current day and time.

    The output is in something close to Internet format. It's not really
    Internet format because it neither converts to UTC nor
    appends the time zone.  However, it will work nicely for MySQL.
    """
    now = datetime.now()
    return now.strftime("%Y-%m-%d")

if __name__ == '__main__':
    print today()
    
from urlparse import urlparse
from pprint import pprint
import json
import sys
import MySQLdb
import pandas as pd
import json
from flask import (Flask, url_for, redirect, request, render_template, session, 
                   flash, jsonify)
import dbi


with open('uploads/mediabiasfactcheck_dct.json') as f:
    data = json.load(f)

tuplist = []
def getTups():
    outF = open("MBFC_all.txt", "w")
    
    conn = dbi.connect('credbase')
    #substitute for NSID
    count = 0
    for entry in data:
        name = "'"+entry['name'].encode('utf-8')+"'"
        publisher = "NULL"
        mediatype = "NULL"
        location = "NULL"
        editor = "NULL"
        if entry['external_url'] != None:
            url = "'"+entry['external_url'].encode('utf-8')+"'"
        else:
            url = "NULL"
        doe = "NULL"
        if entry != data[-1]:
            tup = "(" + "NULL" + ", " + unicode(name, errors='ignore') + ", " + str(publisher) + ", " + str(mediatype) + ", " + str(location) + ", " + str(editor) + ", " + unicode(url, errors='ignore') + ", " + str(doe) +"), " 
        else:
            tup = "(" + "NULL" + ", " + unicode(name, errors='ignore') + ", " + str(publisher) + ", " + str(mediatype) + ", " + str(location) + ", " + str(editor) + ", " + unicode(url, errors='ignore') + ", " + str(doe) +")" 
        outF.write(tup)
        #dbi.addNewsSource(conn, name, publisher, mediatype, location, editor, url, doe)
        count += 1
        #tuplist.append(tup)
        #[count, name, publisher, mediatype, location, editor, url, doe])
    outF.close()
    #return tuplist
    
    
getTups()

-- drop database if exists `credbase`;
CREATE DATABASE IF NOT EXISTS `credbase`;

USE `credbase`;


drop table if exists wikipedia;
drop table if exists alexa;
drop table if exists searchresults;
drop table if exists similar;
drop table if exists watching;
drop table if exists newsSource;
drop table if exists user;

-- drop table if exists newsSource;
CREATE TABLE newsSource(
    nsid int auto_increment primary key,
    name varchar(60),
    publisher varchar (60),
    mediatype enum ('newspaper', 'magazine', 'radio/TV', 'blog', 'website'),
    location varchar (100), 
    editor varchar (60),
    url varchar (100),
    doe year
) ENGINE=InnoDB;

-- drop table if exists searchresult;
CREATE TABLE searchresults (
    sid int auto_increment primary key,
    title varchar(100),
    originQuery varchar(100),
    resultDate date,
    url varchar(200),
    nsid int,
    foreign key (nsid) references newsSource(nsid) on delete set null on update cascade
    -- primary key (nsid, sid)
) ENGINE=InnoDB;
 
-- drop table if exists alexa;
CREATE TABLE alexa (
    aid int auto_increment primary key,
    globalrank int,
    numLinksIn int,
    numLinksOut int,
    nsid int,
    foreign key (nsid) references newsSource(nsid) on delete set null on update cascade
    -- primary key (nsid, aid)
) ENGINE=InnoDB;

-- drop table if exists wikipedia;
CREATE TABLE wikipedia (
    wid int auto_increment primary key,
    url varchar(100),
    name varchar(60),
    nsid int,
    foreign key (nsid) references newsSource(nsid) on delete set null on update cascade
    -- primary key (nsid, wid)
) ENGINE=InnoDB;

-- drop table if exists user;
CREATE TABLE user(
    name varchar(60),
    username varchar(20),
    access enum("admin", "regular"),
    hashedPWD varchar(60),
    primary key (username)
) ENGINE=InnoDB;


-- drop table if exists watching;
CREATE TABLE watching(
    nsid int not null,
    username varchar(10),
    addDate date,
    primary key (username, nsid),
    foreign key (nsid) references newsSource(nsid) on delete cascade,
    foreign key (username) references user(username) on delete cascade
) ENGINE=InnoDB;


-- drop table if exists similar;
CREATE TABLE similar(
    nsid1 int not null,
    nsid2 int not null,
    primary key (nsid1, nsid2),
    foreign key (nsid1) references newsSource(nsid) on delete cascade,
    foreign key (nsid2) references newsSource(nsid) on delete cascade
) ENGINE=InnoDB;


{% extends "base.html" %}
{% block main %}
<br>

<form method="post" action="" enctype="multipart/form-data">
    <div class="form-group row">
        <label for="name" class="col-md-2 col-form-label">Name</label>
        <div class="col-md-4">
            <input id="name" type="text" name="name" class="form-control">
        </div>
    </div>
    <div class="form-group row">
        <label for="publisher" class="col-md-2 col-form-label">Publisher</label>
        <div class="col-md-4">
            <input id="publisher" type="text" name="publisher" class="form-control">
        </div>
    </div>
    <div class="form-group row">
        <label for="location" class="col-md-2 col-form-label">Location</label>
        <div class="col-md-4">
            <input id="location" type="text" name="location" class="form-control">
        </div>
    </div>
    <div class="form-group row">
        <label for="editor" class="col-md-2 col-form-label">Editor</label>
        <div class="col-md-4">
            <input id="editor" type="text" name="editor" class="form-control">
        </div>
    </div>
    <div class="form-group row">
        <label for="doe" class="col-md-2 col-form-label">Date of Establishment (YYYY form, ex: 1983)</label>
        <div class="col-md-4">
            <input id="doe" type="text" name="doe" class="form-control">
        </div>
    </div>
    <div class="form-group row">
        <label for="url" class="col-md-2 col-form-label">URL</label>
        <div class="col-md-4">
            <input id="url" type="text" name="url" class="form-control">
        </div>
    </div>
    
    <fieldset class="form-group">
    <div class="row">
      <legend class="col-md-2 col-form-label">Media Type</legend>
      <div class="col-md-4">
        <div class="form-check">
          <input class="form-check-input" type="radio" name="mediatype" id="gridCheck1" value="website">
          <label class="form-check-label">
            Website or Web-based
          </label>
        </div>
        <div class="form-check">
          <input class="form-check-input" type="radio" name="mediatype" id="gridCheck2" value="newspaper">
          <label class="form-check-label">
            Newspaper
          </label>
        </div>
        <div class="form-check">
          <input class="form-check-input" type="radio" name="mediatype" id="gridCheck3" value="magazine">
          <label class="form-check-label">
            Magazine
          </label>
        </div>
        <div class="form-check">
          <input class="form-check-input" type="radio" name="mediatype" id="gridCheck4" value="radio/tv">
          <label class="form-check-label">
            Radio/TV 
          </label>
        </div>
        <div class="form-check">
          <input class="form-check-input" type="radio" name="mediatype" id="gridCheck5" value="blog">
          <label class="form-check-label">
            Blog
          </label>
        </div>
      </div>
    </div>
  </fieldset>
    
  <div class="form-group row col-md-6">
        <div class="col-md-2">
            <input id="addSource" class="btn btn-primary" type="submit" name="submitSourceAdd" value="add">
        </div>
    </div>
</form>

{% endblock %}<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
        <meta name=author content="Khonzoda Umarova & Annabel Rothschild">
        <title></title>
    </head>
    <body>
 
 
    {% block header %}   
    <nav class="navbar navbar-fixed-top navbar-bootsnipp bg-light">
            <form class="form-inline" id="search" method=POST action= {{url_for('search')}}>
                <input class="form-control" type="search" placeholder="Search" aria-label="Search" name="searchterm">
                <br>
                <select name='search-option' class="form-control">
                    <option value='source'>by source</option>
                    <option value='article'>by article</option>
                </select>
                <br>
                <button class="btn btn-primary my-2 my-sm-0" type="submit">Search</button>
            </form>
            
            <div>
                <a class="navbar-brand text-dark" href="{{url_for('home')}}">CredBase</a>
            </div>
    
            <form class="form-inline" id="logout" action= {{url_for('logout')}} method="post">
                <div>
                    <a class='col-sm col-form-label navbar-brand text-dark' href="{{url_for('user',username=login_session.get('username', ' '))}}">{{ login_session.get('name', 'Not logged in') }}</a>
                </div>
                <button class="btn btn-primary" id="logout" type="submit" name="submit" value="logout">logout</button>
            </form>
    </nav>
    
        

    {% endblock  %}
    
    <div class='container-fluid'>
    {% block title %}
    <h1 class="title">{{ page_title }}</h1>
    {% endblock  %}
    
    
    {% block flashes%}
    <div id="flashes">
    {% with messages = get_flashed_messages() %}
        {% if messages %}
                {% for message in messages %}
                    <p>{{ message }}</p>
                {% endfor %}
        {% endif %}
    {% endwith %}
    </div>
    {% endblock  %}
    
    
    {% block main %} 
    {% endblock  %}
    
    </div>
    </body>
    </html>{% extends "base.html" %}

{% block title %}
<h1 class="title text-center">{{ page_title }}</h1>
{% endblock  %}

{% block main %}
<br>
    <div class="container-fluid">
    <div class="row mb-2">
    <div class='col center-block'>
        <form id="loginform" action={{url_for('login')}} method="post">
            <h3>Login to CredBase</h3>
            <div class="form-group row">
                <label class="col-md-4 col-form-label">Username</label>
                <div class="col-md-8">
                    <input type="text" name="username" required pattern="^\w+$" class="form-control">
                </div>
            </div>
            <div class="form-group row">
                <label class="col-md-4 col-form-label">Password</label>
                <div class="col-md-8">
                    <input type="password" name="password" required class="form-control">
                </div>
            </div>
            <p><button class="btn btn-primary" type="submit">Submit</button></p>
        </form>
    </div>
    
    <div class='col center-block'>
        <p class='lead text-center'>or alternatively</p>
    </div>
    
    <div class='col center-block'>
        <form id="joinform" action={{url_for('join')}} method="post">
                <h3>Join CredBase</h3>
                <div class="form-group row">
                    <label class="col-md-4 col-form-label">Name</label>
                    <div class="col-md-8">
                      <input type="text" name="name" required class="form-control">
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-md-4 col-form-label">Username</label>
                    <div class="col-md-8">
                      <input type="text" name="username" required pattern="^\w+$" class="form-control">
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-md-4 col-form-label">Password</label>
                    <div class="col-md-8">
                      <input type="password" name="password1" required class="form-control">
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-md-4 col-form-label">Password again</label>
                    <div class="col-md-8">
                      <input type="password" name="password2" required class="form-control">
                    </div>
                </div>
                
                <p><button class="btn btn-primary" type="submit">Submit</button></p>
                
                
        </form>
    </div>
    </div>
    </div>
    
    
    <script src="https://code.jquery.com/jquery.js"></script>
    <script>
    /*global $*/
    $("#joinform").on('submit', function (event) {
         var pw1 = $(this).find('[name=password1]').val();
         var pw2 = $(this).find('[name=password2]').val();
         // should also check for length and common words etc
         if( pw1 != pw2 ) {
             // something more sophisticated than alert would be nice
             alert("passwords don't match");
         }
    });
    </script>

{% endblock %}
 {% extends "base.html" %}
{% block main %}

<br>
<div class="container-fluid">
    <div class='row'>
    <div class="col-md-10">
    <h3>About the news source:</h3>
    <div class="col-md-8">
        <ul class="list-group">
          <li class="list-group-item d-flex justify-content-between align-items-center">
            Date established:
            <span class="badge badge-primary badge-pill">{{newsSource.doe}}</span>
          </li>
          <li class="list-group-item d-flex justify-content-between align-items-center">
            Type:
            <span class="badge badge-primary badge-pill">{{newsSource.mediatype}}</span>
          </li>
          <li class="list-group-item d-flex justify-content-between align-items-center">
            Publisher:
            <span class="badge badge-primary badge-pill">{{newsSource.publisher}}</span>
          </li>
          <li class="list-group-item d-flex justify-content-between align-items-center">
            Location:
            <span class="badge badge-primary badge-pill">{{newsSource.location}}</span>
          </li>
          <li class="list-group-item d-flex justify-content-between align-items-center">
            Editor:
            <span class="badge badge-primary badge-pill">{{newsSource.editor}}</span>
          </li>
        </ul>
    </div>
    </div>
    <br>
    <div class="col-md-2 float-right">
        <div class="form-group row btn-block">
            <form method="post" action="{{newsSource.url}}">
                <button class="update-source btn btn-success btn-block">Go to {{newsSource.name}}</button>
            </form>
        </div>
        <div class="form-group row btn-block">
            <form method="post" action="{{url_for('updateSource', nsid=newsSource.nsid)}}">
                <button class="update-source btn btn-secondary btn-block">Update</button>
            </form>
        </div>
        <div class="form-group row btn-block">
            {% if newsSource.onWatchlist %}
            <input id="watch-source" class="btn btn-secondary btn-block" type="button" value="Watch" disabled>
            {% else %}
            <input id="watch-source" class="btn btn-secondary btn-block" type="button" value="Watch">
            {% endif %}
        </div>
    </div>
    </div>
</div>    

    <br>

    <h3>The news source writes about:</h3>
    <table class="table" id="stories">
        <thead>
            <tr>
                <th scope="col">Title</th>
                <th scope="col">Associated query</th>
                <th scope="col">Date</th>
            </tr>
        </thead>
            <!-- Fills out the table --> 
            {% for story in stories %}
                <tr scope="row" data-id={{story.sid}}>
                    <td class="title"><a href="{{story.url}}">{{story.title}}</td>
                    <td class="query">{{story.originQuery}}</td>
                    <td class="date">{{story.resultDate}}</td>
                </tr>
            {% endfor %}
           
        </table>

    <h3>The news source is similar to:</h3>
    <article id="similar">
        <ul>
            {% for similar_source in similar_sources %}
            <li><a href="{{url_for('newsSource', nsid=similar_source.similar_id)}}">{{ similar_source.name }}</a></li>
            {% endfor %}
        </ul>
    </article>
</div>


<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<script>
    /* global $ */
    $("#watch-source").on("click", 
    function(event) {
        var nsid = "{{newsSource.nsid}}";
        var username = "{{ login_session.get('username', ' ') }}";
        if (username == ' ') {
            $('#flashes').html("<p>You need to be logged in for this feature</p>");
            return;
        }
        var url = "{{ url_for('watchSource') }}";
        console.log("user "+username+" added "+nsid+" to their watchlist");
        // $(this).val("Unwatch")
        $(this).prop('disabled', true);
        $.post(url, {'nsid':nsid})
    }
    );
</script>
{% endblock %}

{% extends "base.html" %}
{% block main %}
<br>
<article id="query-results">
    <table class="table" id="article-results">
        <thead>
            <tr>
                <th scope="col">Article Title</th>
                <th scope="col">Source</th>
                <th scope="col">Origin Query</th>
                <th scope="col">Result Date</th>
                <th scope="col">Update this Result</th>
            </tr>
        </thead>
        <tbody>
            {% for article in articles %}
            <tr scope="row" data-sid={{article.sid}}>
                <td scope="row" class="sid" style="display:none">{{article.sid}}</td>
                <td scope="row"><a href="{{article.url}}">{{article.title}}</a></td>
                <td scope="row"><a href="{{url_for('newsSource', nsid=article.nsid)}}">{{ article.name }}</a></td>
                <td scope="row">{{article.originQuery}}</td>
                <td scope="row">{{article.resultDate}}</td>
                <form method="post" action="{{url_for('updateArticle', sid=article.sid)}}">
                <td scope="row"><button class="update-article btn btn-secondary">Update</button></td>
                <form></form>
            </tr>
            {% endfor %}
        </tbody>
    </table>
</article>

{% endblock %}{% extends "base.html" %}
{% block main %}
<br>


<article id="search-results">
    <table class="table" id="search-results">
        <thead>
            <tr>
                <th scope="col">Source</th>
                <th scope="col">URL</th>
                <th scope="col">Date of Establishment</th>
                <th scope="col">Update this source</th>
                <th scope="col">Watch</th>
            </tr>
        </thead>
        <tbody>
            {% for source in search_results %}
            <tr scope="row" data-sid={{source.nsid}}>
                <td scope="row" class="nsid" style="display:none">{{source.nsid}}</td>
                <td scope="row"><a href="{{url_for('newsSource', nsid=source.nsid)}}">{{ source.name }}</a></td>
                <td scope="row"><a href="{{source.url}}">{{source.url}}</a></td>
                <td scope="row">{{source.doe}}</td>
                <form method="post" action="{{url_for('updateSource', nsid=source.nsid)}}">
                <td scope="row"><button class="update-source btn btn-secondary">Update</button></td>
                </form>
                <!--<form method="post" action={{url_for('watchSource')}}>-->
                <!--<td scope="row"><button id="watch-source" class="watch-source btn btn-secondary">Watch</button></td>    -->
                <!--</form>-->
                <td scope="row"> 
                    {% if source.onWatchlist %}
                    <input id="watch-source" class="btn btn-secondary btn-block" type="button" value="Watch" disabled>
                    {% else %}
                    <input id="watch-source" class="btn btn-secondary btn-block" type="button" value="Watch">
                    {% endif %}
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>


<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>

<script>
    /* global $ */
    //Ajax for watch button
    $("#search-results").on("click", "#watch-source", 
    function(event) {
        var nsid = $(this).closest("tr").attr('data-sid');
        var username = "{{ login_session.get('username', ' ') }}";
        if (username == ' ') {
            $('#flashes').html("<p>You need to be logged in for this feature</p>");
            return;
        }
        var url = "{{ url_for('watchSource') }}";
        console.log("user "+username+" added "+nsid+" to their watchlist");
        $(this).prop('disabled', true);
        $.post(url, {'nsid':nsid});
    }
    );
</script>


{% endblock %}{% extends "base.html" %}
{% block main %}
<br>

<form method="post" action="" enctype="multipart/form-data" class='container-fluid'>
    <div class="form-group row">
        <label for="title" class="col-md-2 col-form-label">Title</label>
        <div class="col-md-4">
            <input id='title' type="text" name="title" placeholder="{{articleInfo.title}}" class="form-control">
        </div>
    </div>
    <div class="form-group row">
        <label for="oq" class="col-md-2 col-form-label">Origin Query</label>
        <div class="col-md-4">
            <input id='oq' type="text" name="oq" placeholder="{{articleInfo.originQuery}}" class="form-control">
        </div>
    </div>
    <div class="form-group row">
        <label for="date" class="col-md-2 col-form-label">Result Date</label>
        <div class="col-md-4">
            <input id='date' type="text" name="date" placeholder="{{articleInfo.resultDate}}" class="form-control">
        </div>
    </div>
    <div class="form-group row">
        <label for="url" class="col-md-2 col-form-label">URL</label>
        <div class="col-md-4">
            <input id='url' type="text" name="url" placeholder="{{articleInfo.url}}" class="form-control">
        </div>
    </div>
    
    <div class="form-group row col-md-6">
        <div class="col-md-2">
            <input id="deletebutton" class="btn btn-primary" type="submit" name="submitDelete" value="delete" data-sid="{{articleInfo.sid}}">
        </div>
        <div class="col-md-2">
            <input id="updatebutton" class="btn btn-primary" type="submit" name="submitUpdate" value="update" data-sid="{{articleInfo.sid}}">
        </div>
    </div>
               
    
</form>

{% endblock %}{% extends "base.html" %}
{% block main %}
<br>


    <form class="form-inline" id="search" method=POST action= {{url_for('search')}}>
        <input class="form-control" type="search" placeholder="Search a Source" aria-label="Search a Source" name="searchterm">
        <button class="btn btn-primary my-2 my-sm-0" type="submit">Search</button>
    </form>

<p>Find a source to update: 
<form method="post" action="" enctype="multipart/form-data">
    <p><label for="nm">Your CRED ID#: <input id='nm' type="text" name="nm"></label></p>
    <p><label for="file">File: <input id='file' type="file" name="file"></label></p>
    <p><label for="date">Enter date in form YYYY-MM-DD: <input id='date' type="text" name="date"></label></p>
    <p><label for="query">Origin query: <input id='query' type="text" name="query"></label></p>
    <p><input type="submit" value="upload"></p>
</form>

{% if nm != '' and src != '' %}
<p>Last upload: {{nm}}</p>
{% endif %}

{% endblock %}{% extends "base.html" %}
{% block main %}
<br>

<form method="post" action="" enctype="multipart/form-data">
   <div class="form-group row">
        <label for="name" class="col-md-2 col-form-label">Name</label>
        <div class="col-md-4">
            <input id='name' type="text" name="name" placeholder="{{sourceInfo.name}}" class="form-control">
        </div>
    </div>
    <div class="form-group row">
        <label for="publisher" class="col-md-2 col-form-label">Publisher</label>
        <div class="col-md-4">
            <input id='publisher' type="text" name="publisher" placeholder="{{sourceInfo.publisher}}" class="form-control">
        </div>
    </div>
    <div class="form-group row">
        <label for="location" class="col-md-2 col-form-label">Location</label>
        <div class="col-md-4">
            <input id='location' type="text" name="location" placeholder="{{sourceInfo.location}}" class="form-control">
        </div>
    </div>
    <div class="form-group row">
        <label for="editor" class="col-md-2 col-form-label">Editor</label>
        <div class="col-md-4">
            <input id='editor' type="text" name="editor" placeholder="{{sourceInfo.editor}}" class="form-control">
        </div>
    </div>
    <div class="form-group row">
        <label for="doe" class="col-md-2 col-form-label">Date of Establishment (YYYY form, ex: 1983)</label>
        <div class="col-md-4">
            <input id='doe' type="text" name="doe" placeholder="{{sourceInfo.doe}}" class="form-control">
        </div>
    </div>
    <div class="form-group row">
        <label for="url" class="col-md-2 col-form-label">URL</label>
        <div class="col-md-4">
            <input id='url' type="text" name="url" placeholder="{{sourceInfo.url}}" class="form-control">
        </div>
    </div>
    
    <fieldset class="form-group">
    <div class="row">
      <legend class="col-md-2 col-form-label">Media Type</legend>
      <div class="col-md-4">
        <div class="form-check">
          <input class="form-check-input" type="radio" name="mediatype" id="gridCheck1" value="website">
          <label class="form-check-label">
            Website or Web-based
          </label>
        </div>
        <div class="form-check">
          <input class="form-check-input" type="radio" name="mediatype" id="gridCheck2" value="newspaper">
          <label class="form-check-label">
            Newspaper
          </label>
        </div>
        <div class="form-check">
          <input class="form-check-input" type="radio" name="mediatype" id="gridCheck3" value="magazine">
          <label class="form-check-label">
            Magazine
          </label>
        </div>
        <div class="form-check">
          <input class="form-check-input" type="radio" name="mediatype" id="gridCheck4" value="radio/tv">
          <label class="form-check-label">
            Radio/TV 
          </label>
        </div>
        <div class="form-check">
          <input class="form-check-input" type="radio" name="mediatype" id="gridCheck5" value="blog">
          <label class="form-check-label">
            Blog
          </label>
        </div>
      </div>
    </div>
  </fieldset>
    
    
    <div class="form-group row col-md-6">
        <div class="col-md-2">
            <input id="deletebutton" class="btn btn-primary" type="submit" name="submitDelete" value="delete" data-sid="{{sourceInfo.nsid}}">
        </div>
        <div class="col-md-2">
            <input id="updatebutton" class="btn btn-primary" type="submit" name="submitUpdate" value="update" data-sid="{{sourceInfo.nsid}}">
        </div>
    </div>
</form>


{% endblock %}{% extends "base.html" %}
{% block main %}
<br>


<form method="post" action="" enctype="multipart/form-data">
    <div class="form-group row">
        <label for="nm" class="col-md-2 col-form-label">Your Cred PIN#: </label>
        <div class="col-md-4">
            <input id='nm' type="password" required name="nm" class="form-control">
        </div>
    </div>
    <div class="form-group row">
        <label for="date" class="col-md-2 col-form-label">Enter date in form YYYY-MM-DD: </label>
        <div class="col-md-4">
            <input id='date' type="text" required name="date" class="form-control">
        </div>
    </div>
    <div class="form-group row">
        <label for="query" class="col-md-2 col-form-label">Origin query: </label>
        <div class="col-md-4">
            <input id='query' type="text" required name="query" class="form-control">
        </div>
    </div>
    <div class="form-group row">
        <label for="file" class="col-md-2 col-form-label">File: </label>
        <div class="col-md-4">
            <input id='file' type="file" required name="file">
        </div>
    </div>
    <div class="form-group row col-md-6">
        <input type="submit" value="upload" class="btn btn-primary">
    </div>
</form>

{% if nm != '' and src != '' %}
<p>Last upload: {{nm}}</p>
{% endif %}

{% endblock %}{% extends "base.html" %}

{% block main %}
    <div>
        
        <p><a href="{{url_for('file_upload')}}">Click here</a> to upload a new JSON file of search results.</p>
        <p><a href="{{url_for('addSource')}}">Click here</a> to add a new news source.</p>
        <h3>Here are the news sources on your watchlist</h3>
        
        <table class="table" id="watchlist">
            <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Watching since</th>
                <th scope="col"> </th>
            </tr>
            </thead>
            {% for item in sources %}
            <tr scope="row" data-id={{item.nsid}}>
                <td scope="row" class="name"><a href="{{url_for('newsSource', nsid=item.nsid)}}">{{ item.name }}</a></td>
                <td scope="row" class="date">{{item.addDate}}</td>
                <!--<td scope="row"><button class="unwatch btn btn-secondary">Stop watching</button></td>-->
                <td scope="row"> <input id="unwatch-source" class="btn btn-secondary" type="button" value="Stop watching"> </td>
            </tr>
            {% endfor %}
           
        </table>
        
    </div>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>

<script>
    /* global $ */
    $("#watchlist").on("click", "#unwatch-source", 
    function(event) {
        var nsid = $(this).closest("tr").attr('data-id');
        var username = "{{ login_session.get('username', ' ') }}";
        var url = "{{ url_for('unwatchSource') }}";
        console.log("user "+username+" removed "+nsid+" from their watchlist");
        $(this).prop('disabled', true);
        $.post(url, {'nsid':nsid});
    }
    );
</script>
   
    
{% endblock %}